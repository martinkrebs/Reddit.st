Object subclass: #RedditLink	instanceVariableNames: 'id url title created points'	classVariableNames: ''	poolDictionaries: ''	category: 'Reddit'!!RedditLink commentStamp: 'SvenVanCaekenberghe 8/29/2014 21:25' prior: 0!I am RedditLink.I represent a titled URL.I have an id and a number of points.I know when I was created.Part of the 'Reddit.st - In 10 Cool Pharo Classes' tutorial.!!RedditLink methodsFor: 'printing' stamp: 'SvenVanCaekenberghe 8/27/2014 14:55'!printOn: stream	super printOn: stream.	stream nextPut: $(.	self url printOn: stream.	stream nextPut: $,.	self title printOn: stream.	stream nextPut: $)! !!RedditLink methodsFor: 'initialize' stamp: 'SvenVanCaekenberghe 1/22/2015 09:56'!initialize	self		points: 0;		created: DateAndTime now! !!RedditLink methodsFor: 'asserting' stamp: 'SvenVanCaekenberghe 1/22/2015 09:56'!assertContractUsing: object	object assert: (self url isNil or: [ self url isString ]).	object assert: (self title isNil or: [ self title isString ]).	object assert: (self created isKindOf: DateAndTime).	object assert: (self points isKindOf: Integer).	object assert: self age asSeconds >= 0.	object assert: self printString isString! !!RedditLink methodsFor: 'asserting' stamp: 'SvenVanCaekenberghe 8/29/2014 14:57'!validate	self assertContractUsing: self! !!RedditLink methodsFor: 'accessing' stamp: 'SvenVanCaekenberghe 8/27/2014 14:32'!points	^ points! !!RedditLink methodsFor: 'accessing' stamp: 'SvenVanCaekenberghe 8/27/2014 14:32'!id: anObject	id := anObject! !!RedditLink methodsFor: 'accessing' stamp: 'SvenVanCaekenberghe 8/27/2014 14:32'!created	^ created! !!RedditLink methodsFor: 'accessing' stamp: 'SvenVanCaekenberghe 8/27/2014 14:32'!url: anObject	url := anObject! !!RedditLink methodsFor: 'accessing' stamp: 'SvenVanCaekenberghe 8/27/2014 14:32'!id	^ id! !!RedditLink methodsFor: 'accessing' stamp: 'SvenVanCaekenberghe 8/27/2014 14:32'!title: anObject	title := anObject! !!RedditLink methodsFor: 'accessing' stamp: 'SvenVanCaekenberghe 8/27/2014 14:32'!points: anObject	points := anObject! !!RedditLink methodsFor: 'accessing' stamp: 'SvenVanCaekenberghe 8/27/2014 14:32'!created: anObject	created := anObject! !!RedditLink methodsFor: 'accessing' stamp: 'SvenVanCaekenberghe 8/27/2014 14:32'!title	^ title! !!RedditLink methodsFor: 'accessing' stamp: 'SvenVanCaekenberghe 1/22/2015 09:56'!age	^ DateAndTime now - self created! !!RedditLink methodsFor: 'accessing' stamp: 'SvenVanCaekenberghe 8/27/2014 14:32'!url	^ url! !!RedditLink methodsFor: 'actions' stamp: 'SvenVanCaekenberghe 8/27/2014 14:56'!voteDown	self points > 0		ifTrue: [ self points: self points - 1 ]! !!RedditLink methodsFor: 'actions' stamp: 'SvenVanCaekenberghe 8/27/2014 14:55'!voteUp	self points: self points + 1! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!RedditLink class	instanceVariableNames: ''!!RedditLink class methodsFor: 'instance creation' stamp: 'SvenVanCaekenberghe 8/27/2014 14:53'!withUrl: url title: title	^ self new		url: url;		title: title;		yourself! !DescriptorSystem subclass: #RedditSchema	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Reddit'!!RedditSchema commentStamp: 'SvenVanCaekenberghe 8/29/2014 21:25' prior: 0!I am RedditSchema.I am a Glorp DescriptorSystem.I describe the ORM mapping of the Reddit application, from the model class RedditLink to the RDBMS table REDDIT_LINKS.Part of the 'Reddit.st - In 10 Cool Pharo Classes' tutorial.!!RedditSchema methodsFor: 'classes' stamp: 'SvenVanCaekenberghe 8/27/2014 14:31'!constructAllClasses	^ super constructAllClasses		add: RedditLink;		yourself! !!RedditSchema methodsFor: 'classes' stamp: 'SvenVanCaekenberghe 8/29/2014 15:09'!classModelForRedditLink: aClassModel	#(#id #url #title #created #points) do: [ :each |		aClassModel newAttributeNamed: each ]! !!RedditSchema methodsFor: 'mapping' stamp: 'SvenVanCaekenberghe 9/2/2014 09:32'!descriptorForRedditLink: aDescriptor	| table |	table := self tableNamed: 'REDDIT_LINKS'.	aDescriptor table: table.	#(id url title created points) do: [ :each |		(aDescriptor newMapping: DirectMapping) 			from: each to: (table fieldNamed: each) ]! !!RedditSchema methodsFor: 'tables' stamp: 'SvenVanCaekenberghe 8/27/2014 14:33'!allTableNames	^ #('REDDIT_LINKS')! !!RedditSchema methodsFor: 'tables' stamp: 'SvenVanCaekenberghe 8/27/2014 14:33'!tableForREDDIT_LINKS: aTable	(aTable createFieldNamed: 'id' type: platform serial) bePrimaryKey.	aTable createFieldNamed: 'url' type: (platform varchar: 64).	aTable createFieldNamed: 'title' type: (platform varchar: 64).	aTable createFieldNamed: 'created' type: platform timestamp.	aTable createFieldNamed: 'points' type: platform integer! !WAFileLibrary subclass: #RedditFileLibrary	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Reddit'!!RedditFileLibrary commentStamp: 'SvenVanCaekenberghe 8/29/2014 21:25' prior: 0!I am RedditFileLibrary.I am a Seaside WAFileLibrary.Part of the 'Reddit.st - In 10 Cool Pharo Classes' tutorial.!!RedditFileLibrary methodsFor: 'accessing' stamp: 'SvenVanCaekenberghe 8/27/2014 16:00'!mainCss	^ 'body {  margin: 5px 5px 5px 10px;  padding: 0;  background: url(''bg.gif'') 0 0 repeat-x;  font:1.1em/1.4em Georgia, Times, serif;  color: #464646;  background-color: transparent;}h1 {  margin: 10px 0 5px 0;  color: #840029;  background-color: transparent;  float: left;}h2, h3 {  margin: 0;}h3 {  font-size: small;  line-height: 1.4em;  float: left;}h1, h2, h3 {  text-shadow: 2px 2px 1px #e1e1e1;}p, form {  clear: both;}p {  margin: 0 0 10px 0;}a {  color: #0076a3;  background-color: transparent;}p a {  margin-right: 7px;  font-size: 0.8em;}ol li {  font-size: 0.8em;}ol li a {  font-size: 1.3em;  margin-right: 5px;}input {  display: block;  margin: 5px 0 10px 0;}'! !!RedditFileLibrary methodsFor: 'accessing' stamp: 'SvenVanCaekenberghe 8/27/2014 16:07'!bgGif	^ #[71 73 70 56 57 97 4 0 200 0 213 0 0 254 255 243 254 255 241 255 255 251 253 255 232 253 255 233 254 255 244 254 255 239 254 255 236 254 255 247 254 255 242 255 255 252 254 255 251 255 255 250 254 255 246 254 255 238 255 255 249 254 255 249 254 255 248 254 255 240 253 255 235 254 255 234 254 255 237 253 255 234 254 255 245 254 255 235 253 255 237 255 255 247 253 255 238 253 255 229 255 255 246 255 255 248 254 255 252 253 255 239 254 255 233 253 255 240 255 255 244 253 255 236 254 255 253 254 255 231 255 255 245 254 255 232 254 255 254 254 255 250 255 255 243 254 255 229 254 255 255 254 255 230 253 255 231 255 255 253 255 255 254 253 255 230 255 255 255 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 33 249 4 0 0 0 0 0 44 0 0 0 0 4 0 200 0 0 6 255 64 142 76 56 100 13 137 178 97 114 201 148 189 156 73 215 51 249 52 81 77 175 236 107 160 213 114 177 219 1 55 44 22 163 66 3 66 26 69 80 135 8 239 193 27 222 174 183 41 150 60 222 130 159 80 38 124 22 126 127 127 24 19 134 19 7 24 24 138 141 140 36 7 7 36 144 145 7 25 21 7 21 25 25 36 155 21 159 21 14 155 14 161 161 14 27 168 168 14 14 32 27 6 6 172 175 14 176 175 32 182 175 6 18 18 175 34 34 186 186 1 18 34 193 1 197 195 197 200 9 1 9 202 203 204 206 204 204 0 211 212 213 0 5 213 5 5 43 5 35 218 222 218 225 222 23 23 39 23 35 228 229 228 13 29 13 238 236 39 238 237 8 29 26 29 237 26 26 8 13 250 8 254 250 26 34 248 243 39 48 130 193 7 6 61 120 136 160 48 194 3 15 15 32 64 128 24 49 162 68 6 18 43 50 96 240 224 193 198 143 42 24 8 24 41 96 193 2 6 38 73 46 24 185 82 165 2 1 31 74 46 80 176 224 131 2 5 31 96 220 196 185 51 39 140 64 159 10 126 194 40 81 66 168 209 162 63 139 198 128 17 163 169 211 165 79 155 206 136 145 34 198 84 169 87 179 90 157 193 181 5 215 175 96 195 138 29 75 182 172 217 179 104 211 170 93 203 182 173 219 183 112 227 202 157 75 183 174 220 32 0 59]! !WAComponent subclass: #RedditCaptcha	instanceVariableNames: 'x y sum'	classVariableNames: ''	poolDictionaries: ''	category: 'Reddit'!!RedditCaptcha commentStamp: 'SvenVanCaekenberghe 8/29/2014 21:25' prior: 0!I am RedditCaptcha.I am a Seaside WAComponent.I implement a simple CAPTCHA, asking for a sum in words.Part of the 'Reddit.st - In 10 Cool Pharo Classes' tutorial.!!RedditCaptcha methodsFor: 'rendering' stamp: 'SvenVanCaekenberghe 8/29/2014 16:27'!renderContentOn: html	self x: 10 atRandom.	self y: 10 atRandom.	html		paragraph:			('CAPTCHA: How much is {1} plus {2} ?'				format: { self x asWords. self y asWords }).	html textInput		title: 'Type the answer using digits';		on: #sum of: self! !!RedditCaptcha methodsFor: 'accessing' stamp: 'SvenVanCaekenberghe 8/27/2014 15:37'!x: anObject	x := anObject! !!RedditCaptcha methodsFor: 'accessing' stamp: 'SvenVanCaekenberghe 8/27/2014 15:37'!sum	^ sum! !!RedditCaptcha methodsFor: 'accessing' stamp: 'SvenVanCaekenberghe 8/27/2014 15:37'!x	^ x! !!RedditCaptcha methodsFor: 'accessing' stamp: 'SvenVanCaekenberghe 8/27/2014 15:37'!y	^ y! !!RedditCaptcha methodsFor: 'accessing' stamp: 'SvenVanCaekenberghe 8/27/2014 15:37'!y: anObject	y := anObject! !!RedditCaptcha methodsFor: 'accessing' stamp: 'SvenVanCaekenberghe 8/27/2014 15:37'!sum: anObject	sum := anObject! !!RedditCaptcha methodsFor: 'testing' stamp: 'SvenVanCaekenberghe 8/27/2014 15:36'!isSolved	^ self sum asInteger = (self x + self y)! !!RedditCaptcha methodsFor: 'initialization' stamp: 'SvenVanCaekenberghe 8/27/2014 15:37'!initialize	super initialize.	self		x: 0;		y: 0;		sum: 0! !WAComponent subclass: #RedditWebApp	instanceVariableNames: 'linkEditor'	classVariableNames: ''	poolDictionaries: ''	category: 'Reddit'!!RedditWebApp commentStamp: 'SvenVanCaekenberghe 8/29/2014 21:25' prior: 0!I am RedditWebApp.I am a Seaside WAComponent.I am the main web GUI for the Reddit application.Part of the 'Reddit.st - In 10 Cool Pharo Classes' tutorial.!!RedditWebApp methodsFor: 'actions' stamp: 'SvenVanCaekenberghe 8/27/2014 15:28'!voteUp: link	self session glorpSession		inUnitOfWorkDo: [ :session | 			session register: link.			link voteUp ]! !!RedditWebApp methodsFor: 'actions' stamp: 'SvenVanCaekenberghe 8/27/2014 15:28'!voteDown: link	self session glorpSession		inUnitOfWorkDo: [ :session | 			session register: link.			link voteDown ]! !!RedditWebApp methodsFor: 'actions' stamp: 'SvenVanCaekenberghe 8/27/2014 15:44'!showNewLinkEditor	self linkEditor: RedditLinkEditor new.	self linkEditor		onAnswer: [ :answer | 			answer				ifTrue: [ 					self session glorpSession 						inUnitOfWorkDo: [ :session | 							session register: self linkEditor createLink ] ].			self linkEditor: nil ]! !!RedditWebApp methodsFor: 'rendering' stamp: 'SvenVanCaekenberghe 8/27/2014 15:40'!renderActionsOn: html	html		paragraph: [ 			html anchor				callback: [  ];				with: 'Refresh'.			self linkEditor				ifNil: [ 					html anchor						callback: [ self showNewLinkEditor ];						with: 'New Link' ] ]! !!RedditWebApp methodsFor: 'rendering' stamp: 'SvenVanCaekenberghe 8/29/2014 16:05'!renderLatestLinksOn: html	html heading		level2;		with: 'Latest Links'.	html orderedList: [ self latestLinks do: [ :each | self renderLink: each on: html ] ]! !!RedditWebApp methodsFor: 'rendering' stamp: 'SvenVanCaekenberghe 8/29/2014 16:05'!renderHighestRankingLinksOn: html	html heading		level2;		with: 'Highest Ranking Links'.	html orderedList: [ self highestRankingLinks do: [ :each | self renderLink: each on: html ] ]! !!RedditWebApp methodsFor: 'rendering' stamp: 'SvenVanCaekenberghe 8/29/2014 18:37'!renderContentOn: html	html heading: 'Reddit.st'.	html heading		level3;		with: 'In 10 cool Pharo classes'.	self renderActionsOn: html.	self linkEditor ifNotNil: [ html render: self linkEditor ].	self renderHighestRankingLinksOn: html.	self renderLatestLinksOn: html! !!RedditWebApp methodsFor: 'rendering' stamp: 'SvenVanCaekenberghe 8/29/2014 17:15'!renderLink: link on: html	html		listItem: [ 			html anchor				url: link url;				title: link url;				with: link title.			html text: ' Posted ' , (self class durationString: link age) , ' ago. '.			html text: link points asString , ' points. '.			html anchor				callback: [ self voteUp: link ];				title: 'Vote this link up';				with: 'Up'.			html space.			html anchor				callback: [ self voteDown: link ];				title: 'Vote this link down';				with: 'Down' ]! !!RedditWebApp methodsFor: 'accessing' stamp: 'SvenVanCaekenberghe 8/27/2014 15:39'!linkEditor	^ linkEditor! !!RedditWebApp methodsFor: 'accessing' stamp: 'SvenVanCaekenberghe 8/27/2014 15:26'!highestRankingLinks	| query |	query := (Query readManyOf: RedditLink)		orderBy: [ :each | each points descending ];		limit: 20;		yourself.	^ self session glorpSession execute: query! !!RedditWebApp methodsFor: 'accessing' stamp: 'SvenVanCaekenberghe 8/27/2014 15:39'!linkEditor: anObject	linkEditor := anObject! !!RedditWebApp methodsFor: 'accessing' stamp: 'SvenVanCaekenberghe 8/27/2014 15:26'!latestLinks	| query |	query := (Query readManyOf: RedditLink)		orderBy: [ :each | each created descending ];		limit: 20;		yourself.	^ self session glorpSession execute: query! !!RedditWebApp methodsFor: 'hooks' stamp: 'SvenVanCaekenberghe 8/27/2014 15:41'!children	^ self linkEditor notNil		ifTrue: [ Array with: self linkEditor ]		ifFalse: [ super children ]! !!RedditWebApp methodsFor: 'updating' stamp: 'SvenVanCaekenberghe 8/27/2014 16:07'!updateRoot: anHtmlRoot	super updateRoot: anHtmlRoot.	anHtmlRoot title: 'Reddit.st'.	anHtmlRoot stylesheet url: (RedditFileLibrary urlOf: #mainCss)! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!RedditWebApp class	instanceVariableNames: ''!!RedditWebApp class methodsFor: 'initializing' stamp: 'SvenVanCaekenberghe 8/27/2014 16:07'!initialize	(WAAdmin register: self asApplicationAt: 'reddit')		preferenceAt: #sessionClass put: RedditSession;		addLibrary: RedditFileLibrary! !!RedditWebApp class methodsFor: 'utils' stamp: 'SvenVanCaekenberghe 8/27/2014 16:23'!durationString: duration	^ String streamContents: [ :stream | 		| needSpace printer |		needSpace := false.		printer := [ :value :word | 			value isZero				ifFalse: [ 					needSpace ifTrue: [ stream space ].					stream nextPutAll: (value pluralize: word).					needSpace := true ] ].		printer value: duration days value: 'day'.		printer value: duration hours value: 'hour'.		printer value: duration minutes value: 'minute'.		duration < 60 seconds 			ifTrue: [ printer value: duration seconds value: 'second' ].		duration < 1 second 			ifTrue: [ stream nextPutAll: 'less than a second' ] ]! !TestCase subclass: #RedditDatabaseTests	instanceVariableNames: 'session'	classVariableNames: ''	poolDictionaries: ''	category: 'Reddit'!!RedditDatabaseTests commentStamp: 'SvenVanCaekenberghe 8/29/2014 21:25' prior: 0!RedditDatabaseTests are unit test for the mapping between the RedditLink class and the REDDIT_LINKS table.Part of the 'Reddit.st - In 10 Cool Pharo Classes' tutorial.!!RedditDatabaseTests methodsFor: 'running' stamp: 'SvenVanCaekenberghe 8/31/2014 21:21'!setUp	self runningOnInriaCI ifTrue: [ ^ self ].	session := RedditDatabaseResource session.	session accessor		logging: true;		login! !!RedditDatabaseTests methodsFor: 'running' stamp: 'SvenVanCaekenberghe 8/31/2014 14:09'!runningOnInriaCI	| platform ci |	^ [ 			platform := OSPlatform current.			ci := platform environment at: #CI ifAbsent: [ '' ].			ci = 'ci.inria.fr' ]				on: MessageNotUnderstood				do: [ false ]! !!RedditDatabaseTests methodsFor: 'running' stamp: 'SvenVanCaekenberghe 8/31/2014 21:22'!tearDown	self runningOnInriaCI ifTrue: [ ^ self ].	session accessor logout! !!RedditDatabaseTests methodsFor: 'tests' stamp: 'SvenVanCaekenberghe 8/31/2014 14:10'!testUpdate	| link url title id |	self runningOnInriaCI ifTrue: [ self skip ].	url := 'http://www.seaside.st'.	title := 'Seaside Unit Test'.	link := RedditLink withUrl: url title: title.	session inUnitOfWorkDo: [ session register: link ].	id := link id.	session inUnitOfWorkDo: [ 		session register: link.		link voteUp ].	session reset.	link := session readOneOf: RedditLink where: [ :each | each id = id ].	self assert: link points = 1.	session delete: link! !!RedditDatabaseTests methodsFor: 'tests' stamp: 'SvenVanCaekenberghe 8/31/2014 14:09'!testCreate	| link url title id |	self runningOnInriaCI ifTrue: [ self skip ].	url := 'http://www.seaside.st'.	title := 'Seaside Unit Test'.	link := RedditLink withUrl: url title: title.	session inUnitOfWorkDo: [ session register: link ].	id := link id.	self assert: id notNil.	session reset.	link := session readOneOf: RedditLink where: [ :each | each id = id ].	link assertContractUsing: self.	self assert: link url = url.	self assert: link title = title.	session delete: link! !!RedditDatabaseTests methodsFor: 'tests' stamp: 'SvenVanCaekenberghe 8/31/2014 14:10'!testQuery	| links |	self runningOnInriaCI ifTrue: [ self skip ].	links := session readManyOf: RedditLink.	links do: [ :each | 		each assertContractUsing: self.		self assert: (each isKindOf: RedditLink) ]! !Object subclass: #RedditDatabaseResource	instanceVariableNames: ''	classVariableNames: 'DefaultLogin'	poolDictionaries: ''	category: 'Reddit'!!RedditDatabaseResource commentStamp: 'SvenVanCaekenberghe 8/30/2014 00:19' prior: 0!I am RedditDatabaseResource.I hold the specifications of the database connection.You will have to change #createLogin and do a #resetLogin.Part of the 'Reddit.st - In 10 Cool Pharo Classes' tutorial.!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!RedditDatabaseResource class	instanceVariableNames: ''!!RedditDatabaseResource class methodsFor: 'accessing' stamp: 'SvenVanCaekenberghe 8/31/2014 11:59'!login: aLogin	"self login: (Login new		database: PostgreSQLPlatform new;		username: 'sven';		password: '';		connectString: 'localhost:5432_sven';		encodingStrategy: #utf8;		yourself)"	DefaultLogin := aLogin! !!RedditDatabaseResource class methodsFor: 'accessing' stamp: 'SvenVanCaekenberghe 8/27/2014 14:12'!session	^ RedditSchema sessionForLogin: self login! !!RedditDatabaseResource class methodsFor: 'accessing' stamp: 'SvenVanCaekenberghe 8/30/2014 00:16'!resetLogin	self login: nil! !!RedditDatabaseResource class methodsFor: 'accessing' stamp: 'SvenVanCaekenberghe 8/28/2014 15:35'!login	^ DefaultLogin ifNil: [ DefaultLogin := self createLogin ]! !!RedditDatabaseResource class methodsFor: 'utilities' stamp: 'SvenVanCaekenberghe 8/31/2014 11:54'!testConnection	"self testConnection"		| session result |	session := self session.	session accessor		login;		logging: true.	result := session accessor executeSQLString: 'SELECT CURRENT_TIME, CURRENT_DATE'.	session accessor logout.	^ result! !!RedditDatabaseResource class methodsFor: 'utilities' stamp: 'MartinKrebs 6/1/2016 14:47'!createLogin	"When you make changes here, you will most probably want to reset the cached login"		"self resetLogin"		^ Login new		database: PostgreSQLPlatform new;		username: 'martinkrebs';		password: '';		connectString: 'localhost:5432_martinkrebs';		encodingStrategy: #utf8;		yourself! !!RedditDatabaseResource class methodsFor: 'utilities' stamp: 'SvenVanCaekenberghe 8/27/2014 14:12'!createTables	"self createTables"	"This has to be done only once, be sure to set #login"	| session |	session := self session.	session accessor		login;		logging: true.	session inTransactionDo: [ session createTables ].	session accessor logout! !TestCase subclass: #RedditLinkTests	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Reddit'!!RedditLinkTests commentStamp: 'SvenVanCaekenberghe 8/29/2014 21:25' prior: 0!RedditLinkTests are unit tests for RedditLink.Part of the 'Reddit.st - In 10 Cool Pharo Classes' tutorial.!!RedditLinkTests methodsFor: 'testing' stamp: 'SvenVanCaekenberghe 8/27/2014 15:01'!testInitialState	| link |	link := RedditLink new.	link assertContractUsing: self.	self assert: link points isZero! !!RedditLinkTests methodsFor: 'testing' stamp: 'SvenVanCaekenberghe 8/27/2014 15:01'!testVoting	| link |	link := RedditLink new.	link assertContractUsing: self.	self assert: link points isZero.	link voteUp.	self assert: link points = 1.	link voteDown.	self assert: link points isZero.	link voteDown.	self assert: link points isZero! !!RedditLinkTests methodsFor: 'testing' stamp: 'SvenVanCaekenberghe 8/27/2014 15:01'!testCreate	| link url title |	url := 'http://www.seaside.st'.	title := 'Seaside'.	link := RedditLink withUrl: url title: title.	link assertContractUsing: self.	self assert: link points isZero.	self assert: link url = url.	self assert: link title = title! !WASession subclass: #RedditSession	instanceVariableNames: 'glorpSession'	classVariableNames: ''	poolDictionaries: ''	category: 'Reddit'!!RedditSession commentStamp: 'SvenVanCaekenberghe 8/29/2014 21:25' prior: 0!I am RedditSession.I am a Seaside WASession.I hold onto a Glorp database session.Part of the 'Reddit.st - In 10 Cool Pharo Classes' tutorial.!!RedditSession methodsFor: 'accessing' stamp: 'SvenVanCaekenberghe 8/27/2014 15:17'!glorpSession	glorpSession ifNil: [ glorpSession := self newGlorpSession ].	glorpSession accessor isLoggedIn		ifFalse: [ glorpSession accessor login ].	^ glorpSession! !!RedditSession methodsFor: 'parent/child' stamp: 'SvenVanCaekenberghe 8/27/2014 15:17'!unregistered	super unregistered.	self teardownGlorpSession! !!RedditSession methodsFor: 'private' stamp: 'SvenVanCaekenberghe 8/27/2014 15:17'!teardownGlorpSession	self glorpSession logout! !!RedditSession methodsFor: 'private' stamp: 'SvenVanCaekenberghe 8/27/2014 15:17'!newGlorpSession	| session |	session := RedditDatabaseResource session.	session accessor logging: true.	^ session! !WAComponent subclass: #RedditLinkEditor	instanceVariableNames: 'url title captcha'	classVariableNames: ''	poolDictionaries: ''	category: 'Reddit'!!RedditLinkEditor commentStamp: 'SvenVanCaekenberghe 8/29/2014 21:25' prior: 0!I am WARedditLinkEditor.I am a Seaside WAComponent.I offer an interface to create a new RedditLink.Part of the 'Reddit.st - In 10 Cool Pharo Classes' tutorial.!!RedditLinkEditor methodsFor: 'hooks' stamp: 'SvenVanCaekenberghe 8/27/2014 15:46'!children	^ Array with: self captcha! !!RedditLinkEditor methodsFor: 'rendering' stamp: 'SvenVanCaekenberghe 8/27/2014 15:46'!renderContentOn: html	html		form: [ 			html paragraph: 'Please enter a URL and title for the link that you want to add:'.			html textInput				size: 48;				title: 'The URL of the new link';				on: #url of: self.			html textInput				size: 48;				title: 'The title of the new link';				on: #title of: self.			html render: self captcha.			html submitButton on: #cancel of: self.			html submitButton on: #save of: self ]! !!RedditLinkEditor methodsFor: 'accessing' stamp: 'SvenVanCaekenberghe 8/27/2014 15:45'!url: anObject	url := anObject! !!RedditLinkEditor methodsFor: 'accessing' stamp: 'SvenVanCaekenberghe 8/27/2014 15:45'!title: anObject	title := anObject! !!RedditLinkEditor methodsFor: 'accessing' stamp: 'SvenVanCaekenberghe 8/27/2014 15:45'!captcha	^ captcha! !!RedditLinkEditor methodsFor: 'accessing' stamp: 'SvenVanCaekenberghe 8/27/2014 15:45'!title	^ title! !!RedditLinkEditor methodsFor: 'accessing' stamp: 'SvenVanCaekenberghe 8/27/2014 15:45'!url	^ url! !!RedditLinkEditor methodsFor: 'accessing' stamp: 'SvenVanCaekenberghe 8/27/2014 15:45'!captcha: anObject	captcha := anObject! !!RedditLinkEditor methodsFor: 'testing' stamp: 'SvenVanCaekenberghe 8/27/2014 16:12'!isUrlValid	^ [ 			ZnClient new				get: self url;				isSuccess ]			on: Error			do: [ false ]! !!RedditLinkEditor methodsFor: 'testing' stamp: 'SvenVanCaekenberghe 8/27/2014 15:49'!isUrlMissing	^ self url isNil or: [ self url isEmpty or: [ self url = 'http://' ] ]! !!RedditLinkEditor methodsFor: 'testing' stamp: 'SvenVanCaekenberghe 8/27/2014 15:49'!isTitleMissing	^ self title isNil or: [ self title isEmpty or: [ self title = 'title' ] ]! !!RedditLinkEditor methodsFor: 'actions' stamp: 'SvenVanCaekenberghe 8/27/2014 15:47'!cancel	self answer: false! !!RedditLinkEditor methodsFor: 'actions' stamp: 'SvenVanCaekenberghe 8/27/2014 15:48'!save	self isUrlMissing		ifTrue: [ ^ self inform: 'Please enter an URL' ].	self isTitleMissing		ifTrue: [ ^ self inform: 'Please enter a title' ].	self captcha isSolved		ifFalse: [ ^ self inform: 'Please answer the correct sum using digits' ].	self isUrlValid		ifFalse: [ ^ self inform: 'The URL you entered did not resolve' ].	self answer: true! !!RedditLinkEditor methodsFor: 'private' stamp: 'SvenVanCaekenberghe 8/27/2014 15:48'!createLink	^ RedditLink withUrl: self url title: self title! !!RedditLinkEditor methodsFor: 'initialize' stamp: 'SvenVanCaekenberghe 8/27/2014 15:47'!initialize	super initialize.	self		url: 'http://';		title: 'title';		captcha: RedditCaptcha new! !!RedditLinkEditor methodsFor: 'updating' stamp: 'SvenVanCaekenberghe 8/27/2014 15:47'!updateRoot: anHtmlRoot	super updateRoot: anHtmlRoot.	anHtmlRoot title: 'Reddit.st - Submit a new link'! !RedditWebApp initialize!